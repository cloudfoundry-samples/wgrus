<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rest="http://www.springframework.org/schema/integration/http"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:redis="http://www.springframework.org/schema/data/redis"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cloud="http://schema.cloudfoundry.org/spring"
	xsi:schemaLocation="http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring-0.8.xsd
		http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
		http://www.springframework.org/schema/data/redis http://www.springframework.org/schema/data/redis/spring-redis-1.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<amqp:inbound-channel-adapter channel="orderChannel"
		connection-factory="rabbitConnectionFactory"
		queue-names="orders"
		error-channel="errorLogger"/>

	<int:logging-channel-adapter id="errorLogger" log-full-message="true" level="WARN"/>

	<int:claim-check-out input-channel="orderChannel" remove-message="true" output-channel="inventoryChannel"/>

	<int:chain input-channel="inventoryChannel" output-channel="amqpOut">
		<int:json-to-object-transformer type="org.wgrus.Order"/>
		<int:enricher request-channel="creditCheck">
			<int:property name="approved" expression="payload.startsWith('OK')"/>
		</int:enricher>
		<int:enricher request-channel="inventoryRouter">
			<int:property name="reserved" expression="payload"/>
		</int:enricher>
		<int:object-to-json-transformer/>
		<int:claim-check-in/>
	</int:chain>

	<int:channel id="creditCheck"/>

	<int:service-activator input-channel="creditCheck" expression="@creditService.check(payload.customerId)"/>

	<int:router input-channel="inventoryRouter" expression="payload.productId + 'Inventory'"/>

	<int:service-activator input-channel="widgetInventory" expression="@widgetInventoryService.reserve(payload.quantity)"/>

	<int:service-activator input-channel="gadgetInventory" expression="@gadgetInventoryService.reserve(payload.quantity)"/>

	<bean id="widgetInventoryService" class="org.wgrus.services.RedisInventoryService">
		<constructor-arg value="widgets"/>
		<constructor-arg ref="redisConnectionFactory"/>
	</bean>

	<bean id="gadgetInventoryService" class="org.wgrus.services.RedisInventoryService">
		<constructor-arg value="gadgets"/>
		<constructor-arg ref="redisConnectionFactory"/>
	</bean>

	<amqp:outbound-channel-adapter id="amqpOut" amqp-template="rabbitTemplate" routing-key="inventory"/>

	<bean id="messageStore" class="org.springframework.integration.mongodb.store.MongoDbMessageStore">
		<constructor-arg ref="mongoDbFactory"/>
	</bean>

	<rabbit:queue name="orders"/>

	<rabbit:queue name="inventory"/>

	<rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory"/>

	<rabbit:admin connection-factory="rabbitConnectionFactory"/>

	<bean id="creditService" class="org.wgrus.services.CreditService"/>

	<beans profile="default">
		<mongo:db-factory id="mongoDbFactory"/>
		<rabbit:connection-factory id="rabbitConnectionFactory"/>
		<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"/>
	</beans>

	<beans profile="cloud">
		<cloud:mongo-db-factory id="mongoDbFactory"/>
		<cloud:rabbit-connection-factory id="rabbitConnectionFactory"/>
		<cloud:redis-connection-factory id="redisConnectionFactory"/>
	</beans>

	<!--
	<rest:outbound-gateway url="http://wgrus-billing.cloudfoundry.com/authorize/{customer}" request-channel="creditCheck"
			expected-response-type="java.lang.String">
		<rest:uri-variable name="customer" expression="payload.getCustomerId()"/>
	</rest:outbound-gateway>
	-->
	
</beans>
